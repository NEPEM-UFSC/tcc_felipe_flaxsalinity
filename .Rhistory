left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep))
dfanal
# modelo generalizado
mod_b <- aov(b ~ gen * dosef + rep,
data = dfanal)
anova(mod_b)
library(rio)
library(tidyverse)
df <- import("infiltracao_solo.xlsx")
setwd("D:/Downloads")
View(df)
df <-
import("infiltracao_solo.xlsx")
View(df)
View(df)
df <-
import("infiltracao_solo.xlsx") |>
pivot_longer(-tempo)
df
ggplot(df, aes(tempo, value, color = name)) +
geom_path()
ggplot(df, aes(tempo, value, color = name)) +
geom_path(linewidth = 1)
ajustar_kostiakov <- function(tempo, infiltracao) {
# Transformação log-log
log_tempo <- log(tempo)
log_infiltracao <- log(infiltracao)
# Ajuste linear do modelo log(I) = log(a) + b*log(t)
modelo <- lm(log_infiltracao ~ log_tempo)
# Coeficientes
log_a <- coef(modelo)[1]
b <- coef(modelo)[2]
a <- exp(log_a)
# Impressão da equação
cat("Equação de Kostiakov:\n")
cat(paste0("I(t) = ", round(a, 3), " * t^", round(b, 3), "\n"))
# Retorna os parâmetros
return(list(a = a, b = b))
}
df |>
group_by(name) |>
nest() |>
mutate(curva = map(data, function(x){
ajustar_kostiakov(tempo, value)
})) |>
unnest(cols = curva)
df |>
group_by(name) |>
nest() |>
mutate(curva = map(data, function(x){
ajustar_kostiakov(x$tempo, x$value)
})) |>
unnest(cols = curva)
ajustar_kostiakov <- function(tempo, infiltracao) {
# Transformação log-log
log_tempo <- log(tempo)
log_infiltracao <- log(infiltracao)
# Ajuste linear do modelo log(I) = log(a) + b*log(t)
modelo <- lm(log_infiltracao ~ log_tempo)
# Coeficientes
log_a <- coef(modelo)[1]
b <- coef(modelo)[2]
a <- exp(log_a)
# Impressão da equação
cat("Equação de Kostiakov:\n")
cat(paste0("I(t) = ", round(a, 3), " * t^", round(b, 3), "\n"))
# Retorna os parâmetros
return(data.frame(a = a, b = b))
}
df |>
group_by(name) |>
nest() |>
mutate(curva = map(data, function(x){
ajustar_kostiakov(x$tempo, x$value)
})) |>
unnest(cols = curva)
dfanal
# modelo generalizado
mod_b <- aov(b ~ gen * dosef + rep, data = dfanal)
anova(mod_b)
med_b_gen <- emmeans(mod_b, ~ gen)
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
med_b_gen
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != 200)
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != "200")
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep))
left_join(mod_res, df)
mod_res
df
# set_wd_here()
df <-
import("data/dados_linaza.xlsx") |>
mutate(gen = paste0("G", gen)) |>
mutate(cum = G7 < G6)
setwd("D:/Desktop/UFSC/orientacaoes/TCC/tcc_felipe_flaxsalinity")
# set_wd_here()
df <-
import("data/dados_linaza.xlsx") |>
mutate(gen = paste0("G", gen)) |>
mutate(cum = G7 < G6)
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != "200")
View(dfanal)
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != "200")
```
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != "200")
```
# modelo generalizado
mod_b <- aov(b ~ gen * dosef + rep, data = dfanal)
anova(mod_b)
med_b_gen <- emmeans(mod_b, ~ gen)
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
med_b_gen
germanal <- function(time, germ){
gof <- function(mod){
modt <- mod$model
data.frame(
aic = AIC(modt),
rmse = sqrt(mean(residuals(modt)^2)),
mae = mean(abs(residuals(modt)))
)
}
if(all(germ  == 0)){
pars <-
data.frame(
a = NA,
b = NA,
c = NA,
dlag50 = NA,
t50 = NA,
txtot10 = NA,
txtot70 = NA,
txger10 = NA,
txger70 = NA,
tmgr = NA,
mgt = NA,
auc = NA,
ivg = NA,
timson = NA,
meangermtime = NA,
sync = NA,
cugerm = NA,
tt50 = NA
)
cbind(pars, data.frame(aic= NA, rmse = NA, mae = NA))
} else{
# modelo
mod <-
FourPHFfit(
germ,
time,
total.seeds = 24,
partial = FALSE,
fix.y0 = TRUE,
fix.a = TRUE,
tmax = 7,
xp = c(10, 70),
umin = 10,
umax = 75,
tries = 3
)
pars <-
data.frame(
a = mod$a,
b = mod$b,
c = mod$c,
dlag50 = mod$Dlag50,
t50 = mod$t50.total,
t50germ = mod$t50.Germinated,
txtot10 = mod$txp.total[[1]],
txtot70 = mod$txp.total[[2]],
txger10 = mod$txp.Germinated[[1]],
txger70 = mod$txp.Germinated[[2]],
tmgr = mod$TMGR,
mgt = mod$MGT,
auc = mod$AUC,
ivg = GermSpeed(germ, time),
timson = TimsonsIndex(germ, time, total.seeds = 24, max = 7),
meangermtime = MeanGermTime(germ, time),
sync = GermSynchrony(germ, time),
cugerm = CUGerm(germ, time),
tt50 = t50(germ, time)
)
gof <- gof(mod)
cbind(pars, gof)
}
}
# mapear as unidades experimentais
mod_res <-
dftempo |>
group_by(gen, dose, rep) |>
nest() |>
mutate(res = map(data, function(x){
germanal(x$dia, x$germ)
})) |>
unnest(cols = res)
library(rio)
library(pliman)
library(tidyverse)
library(germinationmetrics)
library(gganimate)
library(emmeans)
library(patchwork)
# set_wd_here()
df <-
import("data/dados_linaza.xlsx") |>
mutate(gen = paste0("G", gen)) |>
mutate(cum = G7 < G6)
germanal <- function(time, germ){
gof <- function(mod){
modt <- mod$model
data.frame(
aic = AIC(modt),
rmse = sqrt(mean(residuals(modt)^2)),
mae = mean(abs(residuals(modt)))
)
}
if(all(germ  == 0)){
pars <-
data.frame(
a = NA,
b = NA,
c = NA,
dlag50 = NA,
t50 = NA,
txtot10 = NA,
txtot70 = NA,
txger10 = NA,
txger70 = NA,
tmgr = NA,
mgt = NA,
auc = NA,
ivg = NA,
timson = NA,
meangermtime = NA,
sync = NA,
cugerm = NA,
tt50 = NA
)
cbind(pars, data.frame(aic= NA, rmse = NA, mae = NA))
} else{
# modelo
mod <-
FourPHFfit(
germ,
time,
total.seeds = 24,
partial = FALSE,
fix.y0 = TRUE,
fix.a = TRUE,
tmax = 7,
xp = c(10, 70),
umin = 10,
umax = 75,
tries = 3
)
pars <-
data.frame(
a = mod$a,
b = mod$b,
c = mod$c,
dlag50 = mod$Dlag50,
t50 = mod$t50.total,
t50germ = mod$t50.Germinated,
txtot10 = mod$txp.total[[1]],
txtot70 = mod$txp.total[[2]],
txger10 = mod$txp.Germinated[[1]],
txger70 = mod$txp.Germinated[[2]],
tmgr = mod$TMGR,
mgt = mod$MGT,
auc = mod$AUC,
ivg = GermSpeed(germ, time),
timson = TimsonsIndex(germ, time, total.seeds = 24, max = 7),
meangermtime = MeanGermTime(germ, time),
sync = GermSynchrony(germ, time),
cugerm = CUGerm(germ, time),
tt50 = t50(germ, time)
)
gof <- gof(mod)
cbind(pars, gof)
}
}
# mapear as unidades experimentais
mod_res <-
dftempo |>
group_by(gen, dose, rep) |>
nest() |>
mutate(res = map(data, function(x){
germanal(x$dia, x$germ)
})) |>
unnest(cols = res)
dftempo <-
df |>
select(gen:G7) |>
pivot_longer(G1:G7, names_to = "dai", values_to = "germ") |>
separate_wider_position(dai, widths = c(1, dia = 1)) |>
mutate(dia = as.numeric(dia))
gof <- function(mod){
modt <- mod$model
data.frame(
aic = AIC(modt),
rmse = sqrt(mean(residuals(modt)^2)),
mae = mean(abs(residuals(modt)))
)
}
germanal <- function(time, germ){
gof <- function(mod){
modt <- mod$model
data.frame(
aic = AIC(modt),
rmse = sqrt(mean(residuals(modt)^2)),
mae = mean(abs(residuals(modt)))
)
}
if(all(germ  == 0)){
pars <-
data.frame(
a = NA,
b = NA,
c = NA,
dlag50 = NA,
t50 = NA,
txtot10 = NA,
txtot70 = NA,
txger10 = NA,
txger70 = NA,
tmgr = NA,
mgt = NA,
auc = NA,
ivg = NA,
timson = NA,
meangermtime = NA,
sync = NA,
cugerm = NA,
tt50 = NA
)
cbind(pars, data.frame(aic= NA, rmse = NA, mae = NA))
} else{
# modelo
mod <-
FourPHFfit(
germ,
time,
total.seeds = 24,
partial = FALSE,
fix.y0 = TRUE,
fix.a = TRUE,
tmax = 7,
xp = c(10, 70),
umin = 10,
umax = 75,
tries = 3
)
pars <-
data.frame(
a = mod$a,
b = mod$b,
c = mod$c,
dlag50 = mod$Dlag50,
t50 = mod$t50.total,
t50germ = mod$t50.Germinated,
txtot10 = mod$txp.total[[1]],
txtot70 = mod$txp.total[[2]],
txger10 = mod$txp.Germinated[[1]],
txger70 = mod$txp.Germinated[[2]],
tmgr = mod$TMGR,
mgt = mod$MGT,
auc = mod$AUC,
ivg = GermSpeed(germ, time),
timson = TimsonsIndex(germ, time, total.seeds = 24, max = 7),
meangermtime = MeanGermTime(germ, time),
sync = GermSynchrony(germ, time),
cugerm = CUGerm(germ, time),
tt50 = t50(germ, time)
)
gof <- gof(mod)
cbind(pars, gof)
}
}
# mapear as unidades experimentais
mod_res <-
dftempo |>
group_by(gen, dose, rep) |>
nest() |>
mutate(res = map(data, function(x){
germanal(x$dia, x$germ)
})) |>
unnest(cols = res)
View(mod_res)
# modelo generalizado
mod_b <- aov(b ~ gen * dosef + rep, data = dfanal)
dfanal <-
left_join(mod_res, df) |>
mutate(total = 24,
germperc = a / 100,
dosef = as.factor(dose),
rep = as.factor(rep)) |>
filter(dose != "200")
# modelo generalizado
mod_b <- aov(b ~ gen * dosef + rep, data = dfanal)
anova(mod_b)
med_b_gen <- emmeans(mod_b, ~gen)
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
med_b_gen <- emmeans(mod_b, ~gen|dose)
med_b_gen <- emmeans(mod_b, ~gen|dosef)
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
med_b_gen <- emmeans(mod_b, ~gen)
plot(med_b_gen, comparisons = TRUE, CIs = FALSE, type = "response")
med_b_dose <- emmeans(mod_b, ~ dosef)
plot(med_b_dose, comparisons = TRUE, CIs = FALSE, type = "response")
ggplot(dfanal, aes(gen, a, fill = gen)) +
geom_boxplot() +
facet_wrap(~dose, ncol = 5)
# modelo generalizado
modgen <- glm(cbind(G7, total-G7) ~ gen * dosef + rep,
family = binomial,
data = dfanal)
modmeans_g <- emmeans(modgen, ~gen | dosef)
# gen <-
plot(modmeans_g, comparisons = TRUE, CIs = FALSE, type = "response") +
xlim(c(0, 1)) +
theme_bw()
mod_res |> metan::corr_coef(a:cugerm)
mod_res |> drop_na() |>  metan::corr_coef(a:cugerm)
View(mod_res)
mod_res
mod_res |> ungroup() |>  drop_na() |>  metan::corr_coef(a:cugerm)
mod_res |> ungroup() |>  drop_na() |>  metan::corr_coef(a:cugerm) |> plot()
mod_res
library(metan)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm)
plot(matcor)
network_plot(matcor)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm, -ivg, -timson)
plot(matcor)
network_plot(matcor)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm, -ivg, -timson, - c)
plot(matcor)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm, -ivg, -timson, - c, -t50germ)
plot(matcor)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm, -ivg, -timson, - c, -t50germ, -meangermtime)
plot(matcor)
matcor <-
mod_res |>
ungroup() |>
drop_na() |>
metan::corr_coef(a:cugerm, -ivg, -timson, - c, -t50germ, -meangermtime, -txtot10)
plot(matcor)
network_plot(matcor)
bind_cols(dfanal, d = list(a))
bind_cols(dfanal, d = list("a"))
b <- bind_cols(dfanal, d = list("a"))
View(b)
View(b[[4]][[1]])
